/* Original file generated by JSIL v0.7.8 build 41535. See http://jsil.org/ for more information. */


JSIL.ImplementExternals("NUnit.Framework.Assert", function($) {

    $.Method({ Static: true, Public: true }, "IsTrue",
      new JSIL.MethodSignature(null, [$.Boolean], []),
        function IsTrue(actual) {
            if (!actual)
                throw "Expected true, but result is false.";
        }
    );

    $.Method({ Static: true, Public: true }, "AreEqual",
       new JSIL.MethodSignature(null, [$.Int32, $.Int32], []),
        function AreEqualInt32(expected, actual) {
            if (expected !== actual)
                throw "Expected " + expected + ", but result is " + actual + ".";
        }
     );

    $.Method({ Static: true, Public: true }, "AreEqual",
      new JSIL.MethodSignature(null, [$.Object, $.Object], []),
        function AreEqualObject(expected, actual) {
            if (expected !== actual)
                throw "Expected " + expected + ", but result is " + actual + ".";
        }
    );

    $.Method({ Static: true, Public: true }, "IsNull",
      new JSIL.MethodSignature(null, [$.Object], []),
        function IsNull(ob) {
            if (!ob)
                return;
            throw "Object is expected to be null, but it isn't. (" + ob + ").";
        }
    );

    $.Method({ Static: true, Public: true }, "NotNull",
      new JSIL.MethodSignature(null, [$.Object], []),
        function NotNull(ob) {
            if (!ob)
                throw "Object is expected to be NOT null, but it is.";
        }
    );

});

JSIL.ImplementExternals("NUnit.Framework.StringAssert", function ($) {
        
    $.Method({ Static: true, Public: true }, "AreEqualIgnoringCase",
      new JSIL.MethodSignature(null, [$.String, $.String], []),
        function AreEqualIgnoringCase(expected, actual) {
            if (expected.toLowerCase() != actual.toLowerCase())
                throw "Expected " + expected + ", but result is " + actual + ".";
        }
    );

});