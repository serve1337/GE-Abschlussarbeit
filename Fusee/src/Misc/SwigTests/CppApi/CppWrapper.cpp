/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_CppApi(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_CppApi(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_CppApi(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */



/* Includes the header in the wrapper code */
#include "Parent.h"
#include "Child.h"
#include "Factory.h"
#include "VectorConsumer.h"
#include "RefRefTest.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "CppWrapper.h"

SwigDirector_Parent::SwigDirector_Parent() : Parent(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_Parent::~SwigDirector_Parent() {
  
}


int SwigDirector_Parent::WhatAmI() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackWhatAmI) {
    return Parent::WhatAmI();
  } else {
    jresult = (int) swig_callbackWhatAmI();
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_Parent::DoSomethingElse(int a, int b) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  int ja  ;
  int jb  ;
  
  if (!swig_callbackDoSomethingElse) {
    return Parent::DoSomethingElse(a,b);
  } else {
    ja = a;
    jb = b;
    jresult = (int) swig_callbackDoSomethingElse(ja, jb);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_Parent::swig_connect_director(SWIG_Callback0_t callbackWhatAmI, SWIG_Callback1_t callbackDoSomethingElse) {
  swig_callbackWhatAmI = callbackWhatAmI;
  swig_callbackDoSomethingElse = callbackDoSomethingElse;
}

void SwigDirector_Parent::swig_init_callbacks() {
  swig_callbackWhatAmI = 0;
  swig_callbackDoSomethingElse = 0;
}

SwigDirector_VectorConsumer::SwigDirector_VectorConsumer() : VectorConsumer(), Swig::Director() {
  swig_init_callbacks();
}

int SwigDirector_VectorConsumer::VectorTakerPtr3(CVector3 *pVec) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpVec = 0 ;
  
  if (!swig_callbackVectorTakerPtr3) {
    return VectorConsumer::VectorTakerPtr3(pVec);
  } else {
    jpVec = (void *) pVec; 
    jresult = (int) swig_callbackVectorTakerPtr3(jpVec);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_VectorConsumer::VectorTakerRef3(CVector3 &rVec) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jrVec = 0 ;
  
  if (!swig_callbackVectorTakerRef3) {
    return VectorConsumer::VectorTakerRef3(rVec);
  } else {
    jrVec = (CVector3 *) &rVec; 
    jresult = (int) swig_callbackVectorTakerRef3(jrVec);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_VectorConsumer::VectorTakerVal3(CVector3 vec) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  CVector3_POD /* CVector3_ctype_out */ jvec  ;
  
  if (!swig_callbackVectorTakerVal3) {
    return VectorConsumer::VectorTakerVal3(vec);
  } else {
    /* <CVector3_directorin> */
    jvec = *((CVector3_POD *)&(vec)); 
    /* </CVector3_directorin> */ 
    
    jresult = (int) swig_callbackVectorTakerVal3(jvec);
    c_result = (int)jresult; 
  }
  return c_result;
}

CVector3 SwigDirector_VectorConsumer::GimmeSomeVector() {
  CVector3 c_result = SwigValueInit< CVector3 >() ;
  CVector3 /* CVector3_ctype */ jresult = 0 ;
  
  if (!swig_callbackGimmeSomeVector) {
    return VectorConsumer::GimmeSomeVector();
  } else {
    jresult = (CVector3 /* CVector3_ctype */) swig_callbackGimmeSomeVector();
    /* <CVector3_directorout> */
    c_result = *((CVector3 *)&(jresult)); 
    /* </CVector3_directorout> */
    
  }
  return c_result;
}

int SwigDirector_VectorConsumer::VectorTakerPtr4(CVector4 *pVec) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jpVec = 0 ;
  
  if (!swig_callbackVectorTakerPtr4) {
    return VectorConsumer::VectorTakerPtr4(pVec);
  } else {
    jpVec = (void *) pVec; 
    jresult = (int) swig_callbackVectorTakerPtr4(jpVec);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_VectorConsumer::VectorTakerRef4(CVector4 &rVec) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jrVec = 0 ;
  
  if (!swig_callbackVectorTakerRef4) {
    return VectorConsumer::VectorTakerRef4(rVec);
  } else {
    jrVec = (CVector4 *) &rVec; 
    jresult = (int) swig_callbackVectorTakerRef4(jrVec);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_VectorConsumer::VectorTakerVal4(CVector4 vec) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jvec  ;
  
  if (!swig_callbackVectorTakerVal4) {
    return VectorConsumer::VectorTakerVal4(vec);
  } else {
    jvec = (void *)&vec; 
    jresult = (int) swig_callbackVectorTakerVal4(jvec);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_VectorConsumer::swig_connect_director(SWIG_Callback0_t callbackVectorTakerPtr3, SWIG_Callback1_t callbackVectorTakerRef3, SWIG_Callback2_t callbackVectorTakerVal3, SWIG_Callback3_t callbackGimmeSomeVector, SWIG_Callback4_t callbackVectorTakerPtr4, SWIG_Callback5_t callbackVectorTakerRef4, SWIG_Callback6_t callbackVectorTakerVal4) {
  swig_callbackVectorTakerPtr3 = callbackVectorTakerPtr3;
  swig_callbackVectorTakerRef3 = callbackVectorTakerRef3;
  swig_callbackVectorTakerVal3 = callbackVectorTakerVal3;
  swig_callbackGimmeSomeVector = callbackGimmeSomeVector;
  swig_callbackVectorTakerPtr4 = callbackVectorTakerPtr4;
  swig_callbackVectorTakerRef4 = callbackVectorTakerRef4;
  swig_callbackVectorTakerVal4 = callbackVectorTakerVal4;
}

void SwigDirector_VectorConsumer::swig_init_callbacks() {
  swig_callbackVectorTakerPtr3 = 0;
  swig_callbackVectorTakerRef3 = 0;
  swig_callbackVectorTakerVal3 = 0;
  swig_callbackGimmeSomeVector = 0;
  swig_callbackVectorTakerPtr4 = 0;
  swig_callbackVectorTakerRef4 = 0;
  swig_callbackVectorTakerVal4 = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_Parent() {
  void * jresult ;
  Parent *result = 0 ;
  
  result = (Parent *)new SwigDirector_Parent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Parent(void * jarg1) {
  Parent *arg1 = (Parent *) 0 ;
  
  arg1 = (Parent *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Parent_WhatAmI(void * jarg1) {
  int jresult ;
  Parent *arg1 = (Parent *) 0 ;
  int result;
  
  arg1 = (Parent *)jarg1; 
  result = (int)(arg1)->WhatAmI();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Parent_WhatAmISwigExplicitParent(void * jarg1) {
  int jresult ;
  Parent *arg1 = (Parent *) 0 ;
  int result;
  
  arg1 = (Parent *)jarg1; 
  result = (int)(arg1)->Parent::WhatAmI();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Parent_I_set(void * jarg1, int jarg2) {
  Parent *arg1 = (Parent *) 0 ;
  int arg2 ;
  
  arg1 = (Parent *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->I = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Parent_I_get(void * jarg1) {
  int jresult ;
  Parent *arg1 = (Parent *) 0 ;
  int result;
  
  arg1 = (Parent *)jarg1; 
  result = (int) ((arg1)->I);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Parent_DoSomething(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Parent *arg1 = (Parent *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Parent *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->DoSomething(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Parent_DoSomethingElse(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Parent *arg1 = (Parent *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Parent *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->DoSomethingElse(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Parent_DoSomethingElseSwigExplicitParent(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Parent *arg1 = (Parent *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Parent *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->Parent::DoSomethingElse(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Parent_director_connect(void *objarg, SwigDirector_Parent::SWIG_Callback0_t callback0, SwigDirector_Parent::SWIG_Callback1_t callback1) {
  Parent *obj = (Parent *)objarg;
  SwigDirector_Parent *director = dynamic_cast<SwigDirector_Parent *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Child() {
  void * jresult ;
  Child *result = 0 ;
  
  result = (Child *)new Child();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Child(void * jarg1) {
  Child *arg1 = (Child *) 0 ;
  
  arg1 = (Child *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Child_WhatAmI(void * jarg1) {
  int jresult ;
  Child *arg1 = (Child *) 0 ;
  int result;
  
  arg1 = (Child *)jarg1; 
  result = (int)(arg1)->WhatAmI();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Child_J_set(void * jarg1, int jarg2) {
  Child *arg1 = (Child *) 0 ;
  int arg2 ;
  
  arg1 = (Child *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->J = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Child_J_get(void * jarg1) {
  int jresult ;
  Child *arg1 = (Child *) 0 ;
  int result;
  
  arg1 = (Child *)jarg1; 
  result = (int) ((arg1)->J);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Child_DoEvenMore(void * jarg1) {
  int jresult ;
  Child *arg1 = (Child *) 0 ;
  int result;
  
  arg1 = (Child *)jarg1; 
  result = (int)(arg1)->DoEvenMore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Child_DoSomethingElse(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Child *arg1 = (Child *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Child *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->DoSomethingElse(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Factory_GimmeAParent() {
  void * jresult ;
  Parent *result = 0 ;
  
  result = (Parent *)Factory::GimmeAParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Factory_GimmeAChild() {
  void * jresult ;
  Child *result = 0 ;
  
  result = (Child *)Factory::GimmeAChild();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Factory_GimmeAChildAsAParent() {
  void * jresult ;
  Parent *result = 0 ;
  
  result = (Parent *)Factory::GimmeAChildAsAParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Factory() {
  void * jresult ;
  Factory *result = 0 ;
  
  result = (Factory *)new Factory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Factory(void * jarg1) {
  Factory *arg1 = (Factory *) 0 ;
  
  arg1 = (Factory *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorConsumer() {
  void * jresult ;
  VectorConsumer *result = 0 ;
  
  result = (VectorConsumer *)new SwigDirector_VectorConsumer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorConsumer(void * jarg1) {
  VectorConsumer *arg1 = (VectorConsumer *) 0 ;
  
  arg1 = (VectorConsumer *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorConsumer_VectorTakerPtr3(void * jarg1, void * jarg2) {
  int jresult ;
  VectorConsumer *arg1 = (VectorConsumer *) 0 ;
  CVector3 *arg2 = (CVector3 *) 0 ;
  int result;
  
  arg1 = (VectorConsumer *)jarg1; 
  arg2 = (CVector3 *)jarg2; /* in */
  result = (int)(arg1)->VectorTakerPtr3(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorConsumer_VectorTakerPtr3SwigExplicitVectorConsumer(void * jarg1, void * jarg2) {
  int jresult ;
  VectorConsumer *arg1 = (VectorConsumer *) 0 ;
  CVector3 *arg2 = (CVector3 *) 0 ;
  int result;
  
  arg1 = (VectorConsumer *)jarg1; 
  arg2 = (CVector3 *)jarg2; /* in */
  result = (int)(arg1)->VectorConsumer::VectorTakerPtr3(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorConsumer_VectorTakerRef3(void * jarg1, void * jarg2) {
  int jresult ;
  VectorConsumer *arg1 = (VectorConsumer *) 0 ;
  CVector3 *arg2 = 0 ;
  int result;
  
  arg1 = (VectorConsumer *)jarg1; 
  arg2 = (CVector3 *)jarg2; /* in */
  result = (int)(arg1)->VectorTakerRef3(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorConsumer_VectorTakerRef3SwigExplicitVectorConsumer(void * jarg1, void * jarg2) {
  int jresult ;
  VectorConsumer *arg1 = (VectorConsumer *) 0 ;
  CVector3 *arg2 = 0 ;
  int result;
  
  arg1 = (VectorConsumer *)jarg1; 
  arg2 = (CVector3 *)jarg2; /* in */
  result = (int)(arg1)->VectorConsumer::VectorTakerRef3(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorConsumer_VectorTakerVal3(void * jarg1, CVector3 /* CVector3_ctype */ jarg2) {
  int jresult ;
  VectorConsumer *arg1 = (VectorConsumer *) 0 ;
  CVector3 arg2 ;
  int result;
  
  arg1 = (VectorConsumer *)jarg1; 
  
  /* <CVector3_in> */
  arg2 = *((CVector3 *)&(jarg2));
  /* </CVector3_in> */
  
  result = (int)(arg1)->VectorTakerVal3(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorConsumer_VectorTakerVal3SwigExplicitVectorConsumer(void * jarg1, CVector3 /* CVector3_ctype */ jarg2) {
  int jresult ;
  VectorConsumer *arg1 = (VectorConsumer *) 0 ;
  CVector3 arg2 ;
  int result;
  
  arg1 = (VectorConsumer *)jarg1; 
  
  /* <CVector3_in> */
  arg2 = *((CVector3 *)&(jarg2));
  /* </CVector3_in> */
  
  result = (int)(arg1)->VectorConsumer::VectorTakerVal3(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT CVector3_POD /* CVector3_ctype_out */ SWIGSTDCALL CSharp_VectorConsumer_GimmeSomeVector(void * jarg1) {
  CVector3_POD /* CVector3_ctype_out */ jresult ;
  VectorConsumer *arg1 = (VectorConsumer *) 0 ;
  CVector3 result;
  
  arg1 = (VectorConsumer *)jarg1; 
  result = (arg1)->GimmeSomeVector();
  
  /* <CVector3_out> */
  jresult = *((CVector3_POD *)&(result));
  /* </CVector3_out> */
  
  return jresult;
}


SWIGEXPORT CVector3_POD /* CVector3_ctype_out */ SWIGSTDCALL CSharp_VectorConsumer_GimmeSomeVectorSwigExplicitVectorConsumer(void * jarg1) {
  CVector3_POD /* CVector3_ctype_out */ jresult ;
  VectorConsumer *arg1 = (VectorConsumer *) 0 ;
  CVector3 result;
  
  arg1 = (VectorConsumer *)jarg1; 
  result = (arg1)->VectorConsumer::GimmeSomeVector();
  
  /* <CVector3_out> */
  jresult = *((CVector3_POD *)&(result));
  /* </CVector3_out> */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorConsumer_VV_set(void * jarg1, CVector3 /* CVector3_ctype */ jarg2) {
  VectorConsumer *arg1 = (VectorConsumer *) 0 ;
  CVector3 arg2 ;
  
  arg1 = (VectorConsumer *)jarg1; 
  
  /* <CVector3_in> */
  arg2 = *((CVector3 *)&(jarg2));
  /* </CVector3_in> */
  
  if (arg1) (arg1)->VV = arg2;
}


SWIGEXPORT CVector3_POD /* CVector3_ctype_out */ SWIGSTDCALL CSharp_VectorConsumer_VV_get(void * jarg1) {
  CVector3_POD /* CVector3_ctype_out */ jresult ;
  VectorConsumer *arg1 = (VectorConsumer *) 0 ;
  CVector3 result;
  
  arg1 = (VectorConsumer *)jarg1; 
  result =  ((arg1)->VV);
  
  /* <CVector3_out> */
  jresult = *((CVector3_POD *)&(result));
  /* </CVector3_out> */
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorConsumer_VectorTakerPtr4(void * jarg1, void * jarg2) {
  int jresult ;
  VectorConsumer *arg1 = (VectorConsumer *) 0 ;
  CVector4 *arg2 = (CVector4 *) 0 ;
  int result;
  
  arg1 = (VectorConsumer *)jarg1; 
  arg2 = (CVector4 *)jarg2; /* in */
  result = (int)(arg1)->VectorTakerPtr4(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorConsumer_VectorTakerPtr4SwigExplicitVectorConsumer(void * jarg1, void * jarg2) {
  int jresult ;
  VectorConsumer *arg1 = (VectorConsumer *) 0 ;
  CVector4 *arg2 = (CVector4 *) 0 ;
  int result;
  
  arg1 = (VectorConsumer *)jarg1; 
  arg2 = (CVector4 *)jarg2; /* in */
  result = (int)(arg1)->VectorConsumer::VectorTakerPtr4(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorConsumer_VectorTakerRef4(void * jarg1, void * jarg2) {
  int jresult ;
  VectorConsumer *arg1 = (VectorConsumer *) 0 ;
  CVector4 *arg2 = 0 ;
  int result;
  
  arg1 = (VectorConsumer *)jarg1; 
  arg2 = (CVector4 *)jarg2; /* in */
  result = (int)(arg1)->VectorTakerRef4(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorConsumer_VectorTakerRef4SwigExplicitVectorConsumer(void * jarg1, void * jarg2) {
  int jresult ;
  VectorConsumer *arg1 = (VectorConsumer *) 0 ;
  CVector4 *arg2 = 0 ;
  int result;
  
  arg1 = (VectorConsumer *)jarg1; 
  arg2 = (CVector4 *)jarg2; /* in */
  result = (int)(arg1)->VectorConsumer::VectorTakerRef4(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorConsumer_VectorTakerVal4(void * jarg1, void * jarg2) {
  int jresult ;
  VectorConsumer *arg1 = (VectorConsumer *) 0 ;
  CVector4 arg2 ;
  CVector4 *argp2 ;
  int result;
  
  arg1 = (VectorConsumer *)jarg1; 
  argp2 = (CVector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CVector4", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->VectorTakerVal4(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorConsumer_VectorTakerVal4SwigExplicitVectorConsumer(void * jarg1, void * jarg2) {
  int jresult ;
  VectorConsumer *arg1 = (VectorConsumer *) 0 ;
  CVector4 arg2 ;
  CVector4 *argp2 ;
  int result;
  
  arg1 = (VectorConsumer *)jarg1; 
  argp2 = (CVector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CVector4", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->VectorConsumer::VectorTakerVal4(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorConsumer_director_connect(void *objarg, SwigDirector_VectorConsumer::SWIG_Callback0_t callback0, SwigDirector_VectorConsumer::SWIG_Callback1_t callback1, SwigDirector_VectorConsumer::SWIG_Callback2_t callback2, SwigDirector_VectorConsumer::SWIG_Callback3_t callback3, SwigDirector_VectorConsumer::SWIG_Callback4_t callback4, SwigDirector_VectorConsumer::SWIG_Callback5_t callback5, SwigDirector_VectorConsumer::SWIG_Callback6_t callback6) {
  VectorConsumer *obj = (VectorConsumer *)objarg;
  SwigDirector_VectorConsumer *director = dynamic_cast<SwigDirector_VectorConsumer *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorConsumerCaller_CallVectorConsumer(void * jarg1) {
  VectorConsumer *arg1 = (VectorConsumer *) 0 ;
  
  arg1 = (VectorConsumer *)jarg1; 
  VectorConsumerCaller::CallVectorConsumer(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorConsumerCaller() {
  void * jresult ;
  VectorConsumerCaller *result = 0 ;
  
  result = (VectorConsumerCaller *)new VectorConsumerCaller();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorConsumerCaller(void * jarg1) {
  VectorConsumerCaller *arg1 = (VectorConsumerCaller *) 0 ;
  
  arg1 = (VectorConsumerCaller *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AParamType_i_set(void * jarg1, int jarg2) {
  AParamType *arg1 = (AParamType *) 0 ;
  int arg2 ;
  
  arg1 = (AParamType *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AParamType_i_get(void * jarg1) {
  int jresult ;
  AParamType *arg1 = (AParamType *) 0 ;
  int result;
  
  arg1 = (AParamType *)jarg1; 
  result = (int) ((arg1)->i);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AParamType() {
  void * jresult ;
  AParamType *result = 0 ;
  
  result = (AParamType *)new AParamType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AParamType(void * jarg1) {
  AParamType *arg1 = (AParamType *) 0 ;
  
  arg1 = (AParamType *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RefRefTest_ParameterTaker(void * jarg1) {
  unsigned int jresult ;
  AParamType **arg1 = 0 ;
  bool result;
  
  arg1 = (AParamType **)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AParamType *& type is null", 0);
    return 0;
  } 
  result = (bool)RefRefTest::ParameterTaker(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RefRefTest() {
  void * jresult ;
  RefRefTest *result = 0 ;
  
  result = (RefRefTest *)new RefRefTest();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RefRefTest(void * jarg1) {
  RefRefTest *arg1 = (RefRefTest *) 0 ;
  
  arg1 = (RefRefTest *)jarg1; 
  delete arg1;
}


SWIGEXPORT Parent * SWIGSTDCALL CSharp_Child_SWIGUpcast(Child *jarg1) {
    return (Parent *)jarg1;
}

#ifdef __cplusplus
}
#endif

