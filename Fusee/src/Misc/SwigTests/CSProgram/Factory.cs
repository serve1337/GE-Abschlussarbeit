/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace CppApi {

using System;
using System.Runtime.InteropServices;

public class Factory : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Factory(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Factory obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Factory() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CppApiPINVOKE.delete_Factory(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static Parent GimmeAParent() {
    IntPtr cPtr = CppApiPINVOKE.Factory_GimmeAParent();
    Parent ret = (Parent) CppApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public static Child GimmeAChild() {
    IntPtr cPtr = CppApiPINVOKE.Factory_GimmeAChild();
    Child ret = (cPtr == IntPtr.Zero) ? null : new Child(cPtr, false);
    return ret;
  }

  public static Parent GimmeAChildAsAParent() {
    IntPtr cPtr = CppApiPINVOKE.Factory_GimmeAChildAsAParent();
    Parent ret = (Parent) CppApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public Factory() : this(CppApiPINVOKE.new_Factory(), true) {
  }

}

}
