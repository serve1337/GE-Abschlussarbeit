/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace CppApi {

using System;
using System.Runtime.InteropServices;

public class RefRefTest : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RefRefTest(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(RefRefTest obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~RefRefTest() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CppApiPINVOKE.delete_RefRefTest(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static bool ParameterTaker(ref AParamType /* cstype */ param) {
    IntPtr p_param;
    unsafe { void *pp_param = &p_param;    /* csin_pre */
    try {
      bool ret = CppApiPINVOKE.RefRefTest_ParameterTaker((IntPtr) pp_param /* csin */);
      if (CppApiPINVOKE.SWIGPendingException.Pending) throw CppApiPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } finally {
        param = new AParamType(p_param, false);
        /* csin_post */
    }
} /* csin_terminator */
  }

  public RefRefTest() : this(CppApiPINVOKE.new_RefRefTest(), true) {
  }

}

}
