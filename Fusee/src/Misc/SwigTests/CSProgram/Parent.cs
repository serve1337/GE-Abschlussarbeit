/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace CppApi {

using System;
using System.Runtime.InteropServices;

public class Parent : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Parent(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Parent obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Parent() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CppApiPINVOKE.delete_Parent(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Parent() : this(CppApiPINVOKE.new_Parent(), true) {
    SwigDirectorConnect();
  }

  public virtual int WhatAmI() {
    int ret = (SwigDerivedClassHasMethod("WhatAmI", swigMethodTypes0) ? CppApiPINVOKE.Parent_WhatAmISwigExplicitParent(swigCPtr) : CppApiPINVOKE.Parent_WhatAmI(swigCPtr));
    return ret;
  }

  public int I {
    set {
      CppApiPINVOKE.Parent_I_set(swigCPtr, value);
    } 
    get {
      int ret = CppApiPINVOKE.Parent_I_get(swigCPtr);
      return ret;
    } 
  }

  public int DoSomething(int a, int b) {
    int ret = CppApiPINVOKE.Parent_DoSomething(swigCPtr, a, b);
    return ret;
  }

  public virtual int DoSomethingElse(int a, int b) {
    int ret = (SwigDerivedClassHasMethod("DoSomethingElse", swigMethodTypes1) ? CppApiPINVOKE.Parent_DoSomethingElseSwigExplicitParent(swigCPtr, a, b) : CppApiPINVOKE.Parent_DoSomethingElse(swigCPtr, a, b));
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("WhatAmI", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateParent_0(SwigDirectorWhatAmI);
    if (SwigDerivedClassHasMethod("DoSomethingElse", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateParent_1(SwigDirectorDoSomethingElse);
    CppApiPINVOKE.Parent_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(Parent));
    return hasDerivedMethod;
  }

  private int SwigDirectorWhatAmI() {
    return WhatAmI();
  }

  private int SwigDirectorDoSomethingElse(int a, int b) {
    return DoSomethingElse(a, b);
  }

  public delegate int SwigDelegateParent_0();
  public delegate int SwigDelegateParent_1(int a, int b);

  private SwigDelegateParent_0 swigDelegate0;
  private SwigDelegateParent_1 swigDelegate1;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(int), typeof(int) };
}

}
