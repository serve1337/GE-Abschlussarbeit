/* Generated by JSIL v0.8.2 build 18792. See http://jsil.org/ for more information. */ 
'use strict';
var $asm00 = JSIL.DeclareAssembly("Examples.SceneViewer, Version=0.1.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.SetEntryPoint($asm00, $asm00.TypeRef("Examples.SceneViewer.SceneViewer"), "Main", JSIL.MethodSignature.Void);

JSIL.DeclareNamespace("Examples");
JSIL.DeclareNamespace("Examples.SceneViewer");
/* class Examples.SceneViewer.SceneViewer */ 

(function SceneViewer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Fusee.Engine.RenderCanvas)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.Fusee.Engine.GUIButton)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Fusee.Engine.MouseEventArgs)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm05.Fusee.Math.float4)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Fusee.Engine.CursorType)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.Fusee.Serialization.SceneContainer)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm03.Fusee.Engine.SimpleScene.AABBCalculator)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm05.Fusee.Math.float4x4)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm05.Fusee.Math.AABBf)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm09.System.Math)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm05.Fusee.Math.float3)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm02.Fusee.Engine.GUIHandler)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm02.Fusee.Engine.GUIButtonHandler)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.Fusee.Engine.GUIImage)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm02.Fusee.Engine.RenderContext)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm02.Fusee.Engine.GUIText)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm02.Fusee.Engine.GUIElement)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm07.Fusee.Serialization.Serializer)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm09.System.IO.FileStream)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm09.System.IO.File)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0A.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm09.System.IDisposable)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm03.Fusee.Engine.SimpleScene.SceneRenderer)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm02.Fusee.Engine.Shaders)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm02.Fusee.Engine.ShaderProgram)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.Fusee.Engine.ClearFlags)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm02.Fusee.Engine.Input)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.Fusee.Engine.MouseButtons)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm02.Fusee.Engine.Time)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm01.Fusee.Engine.InputAxis)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.Fusee.Engine.KeyCodes)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm02.Fusee.Engine.Diagnostics)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm09.System.Object)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm06.Fusee.Serialization.MeshComponent)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm09.System.UInt16)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm06.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize(System.Array.Of($asm06.Fusee.Serialization.SceneComponentContainer))) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm06.Fusee.Serialization.SceneComponentContainer)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm06.Fusee.Serialization.TransformComponent)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm06.Fusee.Serialization.SceneComponentContainer))) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm09.System.Collections.Generic.IEnumerable$b1.Of($asm06.Fusee.Serialization.SceneComponentContainer))) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm06.Fusee.Serialization.SceneHeader)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm06.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.TypeRef("Fusee.Math.float4"), [
        $asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single"), 
        $asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm03.TypeRef("Fusee.Engine.SimpleScene.AABBCalculator"), [$asm06.TypeRef("Fusee.Serialization.SceneContainer")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm05.TypeRef("Fusee.Math.float4x4"), [$asm05.TypeRef("Fusee.Math.float4x4"), $asm05.TypeRef("Fusee.Math.float4x4")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm05.TypeRef("Fusee.Math.float4x4"), [$asm09.TypeRef("System.Single")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.TypeRef("Fusee.Engine.GUIHandler"), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.TypeRef("Fusee.Engine.GUIButton"), [
        $asm09.TypeRef("System.Int32"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Int32"), $asm09.TypeRef("System.Int32")
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIButton"), $asm01.TypeRef("Fusee.Engine.MouseEventArgs")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIButton"), $asm01.TypeRef("Fusee.Engine.MouseEventArgs")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIButton"), $asm01.TypeRef("Fusee.Engine.MouseEventArgs")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(JSIL.MethodSignature.Action($asm02.TypeRef("Fusee.Engine.GUIElement")))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.TypeRef("Fusee.Engine.GUIImage"), [
        $asm09.TypeRef("System.String"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Int32"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Int32"), $asm09.TypeRef("System.Int32")
      ]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.TypeRef("Fusee.Engine.GUIText"), [
        $asm09.TypeRef("System.String"), $asm01.TypeRef("Fusee.Engine.IFont"), 
        $asm09.TypeRef("System.Int32"), $asm09.TypeRef("System.Int32")
      ]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Object"), [
        $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Object"), 
        $asm09.TypeRef("System.Type")
      ]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.TypeRef("Fusee.Math.float3"), [
        $asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single"), 
        $asm09.TypeRef("System.Single")
      ]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("Fusee.Serialization.SceneComponentContainer")]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("Fusee.Serialization.SceneComponentContainer")])]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm06.TypeRef("Fusee.Serialization.SceneNodeContainer")]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm06.TypeRef("Fusee.Serialization.SceneNodeContainer")])]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Object")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm09.System.IDisposable.Dispose)) ();
  };


  function SceneViewer__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function SceneViewer__guiFuseeLink_OnGUIButtonDown (sender, mea) {
    this.OpenLink("http://fusee3d.org");
  }; 

  function SceneViewer__guiFuseeLink_OnGUIButtonEnter (sender, mea) {
    (this._guiFuseeLink.ButtonColor = $S00().Construct(0, 0.6, 0.2, 0.4));
    (this._guiFuseeLink).set_BorderWidth(1);
    this.SetCursor($T04().Hand);
  }; 

  function SceneViewer__guiFuseeLink_OnGUIButtonLeave (sender, mea) {
    (this._guiFuseeLink.ButtonColor = $S00().Construct(0, 0, 0, 0));
    (this._guiFuseeLink).set_BorderWidth(0);
    this.SetCursor($T04().Standard);
  }; 

  function SceneViewer_AdjustModelScaleOffset () {
    var box2 = null;
    var box = null;
    if (this._scene !== null) {
      box = box2 = ($S01().Construct(this._scene)).GetBox();
      var arg_34_0 = box2 === null;
    } else {
      arg_34_0 = true;
    }
    var flag = arg_34_0;
    if (flag) {
      this._modelScaleOffset = $T08().Identity.MemberwiseClone();
    }
    var bbox = JSIL.Nullable_Value(box).MemberwiseClone();
    var scale = +$T0B().Max(
      $T0B().Max(
        bbox.get_Size().x, 
        bbox.get_Size().y
      ), 
      bbox.get_Size().z
    );
    this._modelScaleOffset = $S02().CallStatic($T08(), "op_Multiply", null, 
      $S03().CallStatic($T08(), "CreateScale", null, +((200 / scale))).MemberwiseClone(), 
      $T08().CreateTranslation($T0C().op_UnaryNegation(bbox.get_Center().MemberwiseClone()).MemberwiseClone()).MemberwiseClone()
    ).MemberwiseClone();
  }; 

  function SceneViewer_Init () {
    this._zVal = 500;
    this._guiHandler = $S04().Construct();
    (this._guiHandler).AttachToContext(this.RenderCanvas$RC$value);
    this._guiFuseeLink = $S05().Construct(6, 6, 157, 87);
    (this._guiFuseeLink.ButtonColor = $S00().Construct(0, 0, 0, 0));
    (this._guiFuseeLink.BorderColor = $S00().Construct(0, 0.6, 0.2, 1));
    (this._guiFuseeLink).set_BorderWidth(0);
    (this._guiFuseeLink).add_OnGUIButtonDown($T0E().New(this, function () { return $thisType.prototype._guiFuseeLink_OnGUIButtonDown.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "_guiFuseeLink_OnGUIButtonDown", $S06(), false); }.bind(this)));
    (this._guiFuseeLink).add_OnGUIButtonEnter($T0E().New(this, function () { return $thisType.prototype._guiFuseeLink_OnGUIButtonEnter.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "_guiFuseeLink_OnGUIButtonEnter", $S07(), false); }.bind(this)));
    (this._guiFuseeLink).add_OnGUIButtonLeave($T0E().New(this, function () { return $thisType.prototype._guiFuseeLink_OnGUIButtonLeave.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "_guiFuseeLink_OnGUIButtonLeave", $S08(), false); }.bind(this)));
    $S09().CallVirtual("Add", null, this._guiHandler, this._guiFuseeLink);
    this._guiFuseeLogo = $S0A().Construct("Assets/FuseeLogo150.png", 10, 10, -5, 150, 80);
    $S09().CallVirtual("Add", null, this._guiHandler, this._guiFuseeLogo);
    this._guiLatoBlack = (this.RenderCanvas$RC$value).LoadFont("Assets/Lato-Black.ttf", 14);
    this._guiSubText = $S0B().Construct("FUSEE 3D Scene Viewer", this._guiLatoBlack, 100, 100);
    (this._guiSubText.TextColor = $S00().Construct(0.05, 0.25, 0.15, 0.8));
    $S09().CallVirtual("Add", null, this._guiHandler, this._guiSubText);
    var ser = new ($T13())();
    var file = $T15().OpenRead("Assets/Model.fus");
    try {
      this._scene = $T05().$As($S0C().CallVirtual("Deserialize", null, ser, file, null, $T05().__Type__));
    } finally {
      if (file !== null) {
        $IM00().Call(file, null);
      }
    }
    this._sr = new ($T18())(this._scene, "Assets");
    this.AdjustModelScaleOffset();
    (this._guiSubText).set_Text("FUSEE 3D Scene");
    if ((this._scene.Header.CreatedBy !== null) || (this._scene.Header.CreationDate !== null)) {
      var guiSubText = this._guiSubText;
      guiSubText.set_Text(JSIL.ConcatString(guiSubText.get_Text(), " created"));
      if (this._scene.Header.CreatedBy !== null) {
        guiSubText = this._guiSubText;
        guiSubText.set_Text((guiSubText.get_Text() + " by " + this._scene.Header.CreatedBy));
      }
      if (this._scene.Header.CreationDate !== null) {
        guiSubText = this._guiSubText;
        guiSubText.set_Text((guiSubText.get_Text() + " on " + this._scene.Header.CreationDate));
      }
    }
    this._subtextWidth = +$T11().GetTextWidth((this._guiSubText).get_Text(), this._guiLatoBlack);
    this._subtextHeight = +$T11().GetTextHeight((this._guiSubText).get_Text(), this._guiLatoBlack);
    this._sColor = $T1A().GetDiffuseColorShader(this.RenderCanvas$RC$value);
    (this.RenderCanvas$RC$value).SetShader(this._sColor);
    this._colorParam = (this._sColor).GetShaderParam("color");
    (this.RenderCanvas$RC$value).SetShaderParam4f(this._colorParam, $S00().Construct(1, 1, 1, 1));
    (this.RenderCanvas$RC$value.ClearColor = $S00().Construct(1, 1, 1, 1));
  }; 

  function SceneViewer_Main () {
    var app = new $thisType();
    app.Run();
  }; 

  function SceneViewer_RenderAFrame () {
    (this.RenderCanvas$RC$value).Clear($T1C().$Flags("Color", "Depth"));
    var flag = $T1D().get_Instance().IsButton($T1E().Left);
    if (flag) {
      this._angleVelHorz = (30 * Math.fround($T1F().get_Instance().get_DeltaTime())) * +$T1D().get_Instance().GetAxis($T20().MouseX);
      this._angleVelVert = (30 * Math.fround($T1F().get_Instance().get_DeltaTime())) * +$T1D().get_Instance().GetAxis($T20().MouseY);
    } else {
      var curDamp = Math.fround($T0B().Exp(-0.92000001668930054 * +$T1F().get_Instance().get_DeltaTime()));
      this._angleVelHorz = +this._angleVelHorz * curDamp;
      this._angleVelVert = +this._angleVelVert * curDamp;
    }
    if (+$T1D().get_Instance().GetAxis($T20().MouseWheel) === 0) {
      var curDamp2 = Math.fround($T0B().Exp(-0.92000001668930054 * +$T1F().get_Instance().get_DeltaTime()));
      this._zVel = +this._zVel * ((curDamp2 * curDamp2) * curDamp2);
    } else {
      this._zVel = (-100000 * +$T1D().get_Instance().GetAxis($T20().MouseWheel)) * Math.fround($T1F().get_Instance().get_DeltaTime());
    }
    this._angleHorz = +this._angleHorz - +this._angleVelHorz;
    this._angleVert = +this._angleVert - +this._angleVelVert;
    this._zVal = +$T0B().Max(100, $T0B().Min(+this._zVal + +this._zVel, 1000));
    var flag3 = $T1D().get_Instance().IsKey($T21().Left);
    if (flag3) {
      this._angleHorz = +this._angleHorz - (1 * Math.fround($T1F().get_Instance().get_DeltaTime()));
    }
    var flag4 = $T1D().get_Instance().IsKey($T21().Right);
    if (flag4) {
      this._angleHorz = +this._angleHorz + (1 * Math.fround($T1F().get_Instance().get_DeltaTime()));
    }
    var flag5 = $T1D().get_Instance().IsKey($T21().Up);
    if (flag5) {
      this._angleVert = +this._angleVert - (1 * Math.fround($T1F().get_Instance().get_DeltaTime()));
    }
    var flag6 = $T1D().get_Instance().IsKey($T21().Down);
    if (flag6) {
      this._angleVert = +this._angleVert + (1 * Math.fround($T1F().get_Instance().get_DeltaTime()));
    }
    var mtxRot = $S02().CallStatic($T08(), "op_Multiply", null, 
      $T08().CreateRotationX(this._angleVert).MemberwiseClone(), 
      $T08().CreateRotationY(this._angleHorz).MemberwiseClone()
    ).MemberwiseClone();
    var mtxCam = $T08().LookAt(
      0, 
      200, 
      -this._zVal, 
      0, 
      0, 
      0, 
      0, 
      1, 
      0
    );
    (this.RenderCanvas$RC$value.ModelView = $S02().CallStatic($T08(), "op_Multiply", null, $S02().CallStatic($T08(), "op_Multiply", null, mtxCam.MemberwiseClone(), mtxRot.MemberwiseClone()).MemberwiseClone(), this._modelScaleOffset.MemberwiseClone()).MemberwiseClone());
    (this._sr).Render(this.RenderCanvas$RC$value);
    (this._sr).Animate();
    (this._guiHandler).RenderGUI();
    this.Present();
  }; 

  function SceneViewer_Resize () {
    (this.RenderCanvas$RC$value).Viewport(
      0, 
      0, 
      this.get_Width(), 
      this.get_Height()
    );
    var aspectRatio = +((+(this.get_Width()) / +(this.get_Height())));
    (this.RenderCanvas$RC$value.Projection = $T08().CreatePerspectiveFieldOfView(0.7853982, aspectRatio, 1, 10000).MemberwiseClone());
    (this._guiSubText).set_PosX(((+((+(this.get_Width()) - +this._subtextWidth) / 2)) | 0));
    (this._guiSubText).set_PosY((((+(this.get_Height()) - +this._subtextHeight) - 3) | 0));
    (this._guiHandler).Refresh();
  }; 

  function SceneViewer_TestDeserialize () {
    var ser = new ($T13())();
    var file = $T15().OpenRead("Assets/Test.fus");
    try {
      var mc2 = $T05().$As($S0C().CallVirtual("Deserialize", null, ser, file, null, $T05().__Type__));
    } finally {
      if (file !== null) {
        $IM00().Call(file, null);
      }
    }
    $T22().Log(mc2.toString());
  }; 

  function SceneViewer_TestSerialize () {
    var meshComponent = new ($T24())();
    meshComponent.Vertices = JSIL.Array.New($T0C(), [$S0D().Construct(-1, -1, -1), $S0D().Construct(-1, -1, 1), $S0D().Construct(-1, 1, -1), $S0D().Construct(1, -1, -1), $S0D().Construct(1, 1, 1), $S0D().Construct(-1, 1, 1), $S0D().Construct(1, -1, 1), $S0D().Construct(1, 1, -1)]);
    meshComponent.Normals = JSIL.Array.New($T0C(), [$S0D().Construct(-1, -1, -1), $S0D().Construct(-1, -1, 1), $S0D().Construct(-1, 1, -1), $S0D().Construct(1, -1, -1), $S0D().Construct(1, 1, 1), $S0D().Construct(-1, 1, 1), $S0D().Construct(1, -1, 1), $S0D().Construct(1, 1, -1)]);
    meshComponent.Triangles = JSIL.Array.New($T25(), [0, 1, 2, 0, 2, 3, 0, 3, 1, 4, 5, 6, 4, 6, 7, 4, 7, 5]);
    var sceneNodeContainer = new ($T26())();
    var arg_263_0 = sceneNodeContainer;
    var expr_1FD = JSIL.Array.New($T28(), 2);
    var transformComponent = new ($T29())();
    transformComponent.Rotation = $S0D().Construct(0, 0, 0);
    transformComponent.Translation = $S0D().Construct(0.11, 0.11, 0);
    transformComponent.Scale = $S0D().Construct(1, 1, 1);
    expr_1FD[0] = transformComponent;
    expr_1FD[1] = meshComponent;
    arg_263_0.Components = $S0E().Construct($T2B().$Cast(expr_1FD));
    var aChild = sceneNodeContainer;
    var sceneContainer = new ($T05())();
    var header = new ($T2C())();
    header.Version = 1;
    header.Generator = "Fusee.SceneViewer";
    header.CreatedBy = "FuseeProjectTeam";
    sceneContainer.Header = header.MemberwiseClone();
    sceneContainer.Children = $S0F().Construct(JSIL.Array.New($T26(), [aChild, aChild]));
    var ser = new ($T13())();
    var file = $T15().Create("Assets/Test.fus");
    try {
      $S10().CallVirtual("Serialize", null, ser, file, sceneContainer);
    } finally {
      if (file !== null) {
        $IM00().Call(file, null);
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Fusee.Engine.RenderCanvas"), 
      Name: "Examples.SceneViewer.SceneViewer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SceneViewer__ctor
    );

    $.Method({Static:false, Public:false}, "_guiFuseeLink_OnGUIButtonDown", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIButton"), $asm01.TypeRef("Fusee.Engine.MouseEventArgs")]), 
      SceneViewer__guiFuseeLink_OnGUIButtonDown
    );

    $.Method({Static:false, Public:false}, "_guiFuseeLink_OnGUIButtonEnter", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIButton"), $asm01.TypeRef("Fusee.Engine.MouseEventArgs")]), 
      SceneViewer__guiFuseeLink_OnGUIButtonEnter
    );

    $.Method({Static:false, Public:false}, "_guiFuseeLink_OnGUIButtonLeave", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIButton"), $asm01.TypeRef("Fusee.Engine.MouseEventArgs")]), 
      SceneViewer__guiFuseeLink_OnGUIButtonLeave
    );

    $.Method({Static:false, Public:true }, "AdjustModelScaleOffset", 
      JSIL.MethodSignature.Void, 
      SceneViewer_AdjustModelScaleOffset
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Init", 
      JSIL.MethodSignature.Void, 
      SceneViewer_Init
    );

    $.Method({Static:true , Public:true }, "Main", 
      JSIL.MethodSignature.Void, 
      SceneViewer_Main
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RenderAFrame", 
      JSIL.MethodSignature.Void, 
      SceneViewer_RenderAFrame
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Resize", 
      JSIL.MethodSignature.Void, 
      SceneViewer_Resize
    );

    $.Method({Static:false, Public:false}, "TestDeserialize", 
      JSIL.MethodSignature.Void, 
      SceneViewer_TestDeserialize
    );

    $.Method({Static:false, Public:false}, "TestSerialize", 
      JSIL.MethodSignature.Void, 
      SceneViewer_TestSerialize
    );

    $.Field({Static:false, Public:false}, "_angleHorz", $.Single);

    $.Field({Static:false, Public:false}, "_angleVert", $.Single);

    $.Field({Static:false, Public:false}, "_angleVelHorz", $.Single);

    $.Field({Static:false, Public:false}, "_angleVelVert", $.Single);

    $.Field({Static:false, Public:false}, "_zVel", $.Single);

    $.Field({Static:false, Public:false}, "_zVal", $.Single);

    $.Constant({Static:true , Public:false}, "RotationSpeed", $.Single, 1);

    $.Constant({Static:true , Public:false}, "Damping", $.Single, 0.92);

    $.Field({Static:false, Public:false}, "_subtextWidth", $.Single);

    $.Field({Static:false, Public:false}, "_subtextHeight", $.Single);

    $.Field({Static:false, Public:false}, "_modelScaleOffset", $asm05.TypeRef("Fusee.Math.float4x4"));

    $.Field({Static:false, Public:false}, "_meshFace", $asm02.TypeRef("Fusee.Engine.Mesh"));

    $.Field({Static:false, Public:false}, "_meshTea", $asm02.TypeRef("Fusee.Engine.Mesh"));

    $.Field({Static:false, Public:false}, "_sr", $asm03.TypeRef("Fusee.Engine.SimpleScene.SceneRenderer"));

    $.Field({Static:false, Public:false}, "_scene", $asm06.TypeRef("Fusee.Serialization.SceneContainer"));

    $.Field({Static:false, Public:false}, "_sColor", $asm02.TypeRef("Fusee.Engine.ShaderProgram"));

    $.Field({Static:false, Public:false}, "_colorParam", $asm01.TypeRef("Fusee.Engine.IShaderParam"));

    $.Field({Static:false, Public:false}, "_guiHandler", $asm02.TypeRef("Fusee.Engine.GUIHandler"));

    $.Field({Static:false, Public:false}, "_guiFuseeLogo", $asm02.TypeRef("Fusee.Engine.GUIImage"));

    $.Field({Static:false, Public:false}, "_guiFuseeLink", $asm02.TypeRef("Fusee.Engine.GUIButton"));

    $.Field({Static:false, Public:false}, "_guiSubText", $asm02.TypeRef("Fusee.Engine.GUIText"));

    $.Field({Static:false, Public:false}, "_guiLatoBlack", $asm01.TypeRef("Fusee.Engine.IFont"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

